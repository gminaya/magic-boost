/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/Campaigns': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Campaigns.id'];
          name?: parameters['rowFilter.Campaigns.name'];
          status?: parameters['rowFilter.Campaigns.status'];
          location_config?: parameters['rowFilter.Campaigns.location_config'];
          dueDate?: parameters['rowFilter.Campaigns.dueDate'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Campaigns'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Campaigns */
          Campaigns?: definitions['Campaigns'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Campaigns.id'];
          name?: parameters['rowFilter.Campaigns.name'];
          status?: parameters['rowFilter.Campaigns.status'];
          location_config?: parameters['rowFilter.Campaigns.location_config'];
          dueDate?: parameters['rowFilter.Campaigns.dueDate'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Campaigns.id'];
          name?: parameters['rowFilter.Campaigns.name'];
          status?: parameters['rowFilter.Campaigns.status'];
          location_config?: parameters['rowFilter.Campaigns.location_config'];
          dueDate?: parameters['rowFilter.Campaigns.dueDate'];
        };
        body: {
          /** Campaigns */
          Campaigns?: definitions['Campaigns'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/LocationScreens': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.LocationScreens.id'];
          location_id?: parameters['rowFilter.LocationScreens.location_id'];
          /** Identifies a screen, in case a location has multiple */
          order_id?: parameters['rowFilter.LocationScreens.order_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['LocationScreens'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** LocationScreens */
          LocationScreens?: definitions['LocationScreens'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.LocationScreens.id'];
          location_id?: parameters['rowFilter.LocationScreens.location_id'];
          /** Identifies a screen, in case a location has multiple */
          order_id?: parameters['rowFilter.LocationScreens.order_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.LocationScreens.id'];
          location_id?: parameters['rowFilter.LocationScreens.location_id'];
          /** Identifies a screen, in case a location has multiple */
          order_id?: parameters['rowFilter.LocationScreens.order_id'];
        };
        body: {
          /** LocationScreens */
          LocationScreens?: definitions['LocationScreens'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/Locations': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Locations.id'];
          name?: parameters['rowFilter.Locations.name'];
          address?: parameters['rowFilter.Locations.address'];
          /** Latitude */
          lat?: parameters['rowFilter.Locations.lat'];
          lon?: parameters['rowFilter.Locations.lon'];
          format?: parameters['rowFilter.Locations.format'];
          picture?: parameters['rowFilter.Locations.picture'];
          orientation?: parameters['rowFilter.Locations.orientation'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['Locations'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Locations */
          Locations?: definitions['Locations'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Locations.id'];
          name?: parameters['rowFilter.Locations.name'];
          address?: parameters['rowFilter.Locations.address'];
          /** Latitude */
          lat?: parameters['rowFilter.Locations.lat'];
          lon?: parameters['rowFilter.Locations.lon'];
          format?: parameters['rowFilter.Locations.format'];
          picture?: parameters['rowFilter.Locations.picture'];
          orientation?: parameters['rowFilter.Locations.orientation'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.Locations.id'];
          name?: parameters['rowFilter.Locations.name'];
          address?: parameters['rowFilter.Locations.address'];
          /** Latitude */
          lat?: parameters['rowFilter.Locations.lat'];
          lon?: parameters['rowFilter.Locations.lon'];
          format?: parameters['rowFilter.Locations.format'];
          picture?: parameters['rowFilter.Locations.picture'];
          orientation?: parameters['rowFilter.Locations.orientation'];
        };
        body: {
          /** Locations */
          Locations?: definitions['Locations'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  Campaigns: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /** Format: text */
    status: string;
    /** Format: json */
    location_config?: string;
    /** Format: date */
    dueDate?: string;
  };
  LocationScreens: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `Locations.id`.<fk table='Locations' column='id'/>
     */
    location_id?: number;
    /**
     * Format: bigint
     * @description Identifies a screen, in case a location has multiple
     */
    order_id: number;
  };
  /** @description An address on a map */
  Locations: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name: string;
    /** Format: character varying */
    address?: string;
    /**
     * Format: double precision
     * @description Latitude
     */
    lat: number;
    /** Format: double precision */
    lon: number;
    /** Format: text */
    format?: string;
    /** Format: text */
    picture?: string;
    /** Format: text */
    orientation?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description Campaigns */
  'body.Campaigns': definitions['Campaigns'];
  /** Format: bigint */
  'rowFilter.Campaigns.id': string;
  /** Format: text */
  'rowFilter.Campaigns.name': string;
  /** Format: text */
  'rowFilter.Campaigns.status': string;
  /** Format: json */
  'rowFilter.Campaigns.location_config': string;
  /** Format: date */
  'rowFilter.Campaigns.dueDate': string;
  /** @description LocationScreens */
  'body.LocationScreens': definitions['LocationScreens'];
  /** Format: bigint */
  'rowFilter.LocationScreens.id': string;
  /** Format: bigint */
  'rowFilter.LocationScreens.location_id': string;
  /**
   * Format: bigint
   * @description Identifies a screen, in case a location has multiple
   */
  'rowFilter.LocationScreens.order_id': string;
  /** @description Locations */
  'body.Locations': definitions['Locations'];
  /** Format: bigint */
  'rowFilter.Locations.id': string;
  /** Format: text */
  'rowFilter.Locations.name': string;
  /** Format: character varying */
  'rowFilter.Locations.address': string;
  /**
   * Format: double precision
   * @description Latitude
   */
  'rowFilter.Locations.lat': string;
  /** Format: double precision */
  'rowFilter.Locations.lon': string;
  /** Format: text */
  'rowFilter.Locations.format': string;
  /** Format: text */
  'rowFilter.Locations.picture': string;
  /** Format: text */
  'rowFilter.Locations.orientation': string;
}

export interface operations {}

export interface external {}
